#ifndef STABILIZER_HPP
#define STABILIZER_HPP


#include "opencv2/opencv.hpp"
#include "utilities.h"

/**
 * @brief Interface for video stabilization.
 */

class Stabilizer
{
public:
    enum class Warping {
        HOMOGRAPHY,         // arbitrary homography
        ROT_HOMOGRAPHY,     // homographies generated by camera rotations
        AFFINE,             // affine transformations
        RIGID,              // rigid transformations (translation + rotation)
        TRANSLATION,        // only translation
    };

public:
    Stabilizer (const cv::Mat& frame_0, Warping warping=Warping::HOMOGRAPHY, bool warping_back=true, bool visualize=true)
        : warping_{warping}, warping_back_{warping_back}, visualize_{visualize} {
        H_ = cv::Mat::eye(3, 3, CV_64FC1);
        cv::cvtColor(frame_0, frame_gray_0_, CV_BGR2GRAY);
    }

    /**
     * @brief Stabilize next frame. Calls Stabilizer::get_next_homography to get the homography.
     * @param next_frame        The next colored frame to stabilize.
     * @return                  The stabilized frame.
     */
    virtual cv::Mat stabilize_next(const cv::Mat& next_frame);

    /**
     * @brief Get the visualization for the last stabilization.
     * @return The visualization.
     */
    virtual cv::Mat visualization() const {
        return visualization_;
    }

    static cv::Mat find_homography(const cv::vector<cv::Point2f>& points0, const cv::vector<cv::Point2f>& points1, Warping mode=Warping::HOMOGRAPHY);

protected:
    virtual cv::Mat get_next_homography(const cv::Mat& next_frame) = 0;
    virtual void create_visualization(const cv::Mat& next_frame) = 0;


protected:
    // Parameters
    Warping warping_ = Warping::HOMOGRAPHY;
    bool warping_back_;
    bool visualize_ = true;

    cv::Mat H_;
    cv::Mat frame_gray_0_;
    cv::Mat frame;
    cv::Mat visualization_;
    cv::Mat frame_gray_, H_frame_gray_;
};

#endif // STABILIZER_HPP
